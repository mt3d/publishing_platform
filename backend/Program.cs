using backend;
using backend.Data;
using backend.Infrastructure.UserManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

// TODO: Configure connection string and database provider
builder.Services.AddDbContext<PlatformContext>(options =>
{
	// TODO: Add the ability to use other providers
	options.UseSqlServer(builder.Configuration["ConnectionStrings:PlatformConnection"]);
});

// TODO: Add Localization

//builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(opts =>
{
	// TODO: Does the API support Non Nullable Reference types?

	// From Microsoft.OpenApi.Models
	var securityScheme = new OpenApiSecurityScheme
	{
		Name = "JWT Authentication",
		Description = "Enter your JWT token in this field",
		// REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
		In = ParameterLocation.Header,
		// REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
		Type = SecuritySchemeType.Http,
		// REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
		Scheme = "bearer",
		// A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
		BearerFormat = "JWT"
	};

	opts.AddSecurityDefinition("Bearer", securityScheme);

	var securityRequirement = new OpenApiSecurityRequirement
	{
		{
			new OpenApiSecurityScheme
			{
				Reference = new OpenApiReference
				{
					Type = ReferenceType.SecurityScheme,
					Id = "Bearer"
				}
			},
			new string[] {} // no specific scope is needed
		}
	};

	opts.AddSecurityRequirement(securityRequirement);

	opts.SwaggerDoc("v1", new OpenApiInfo { Title = "Publishing_Platform", Version = "v0.1" });
});

// TODO: Add Cors

builder.Services.AddControllers();

// TODO: Add custom services here
builder.Services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
builder.Services.AddScoped<IUserAccessor, UserAccessor>();

/*
 * "You define the configuration using profiles. And then you let AutoMapper
 * know in what assemblies are those profiles defined by calling the IServiceCollection
 * extension method AddAutoMapper at startup"
 */
builder.Services.AddAutoMapper(cfg => { }, typeof(Program));

// TODO: Add JWT
builder.Services.AddJwtAuthentication();

var app = builder.Build();

// TODO: Use error handling

// TODO: Use Cors

app.UseAuthentication();
app.MapControllers();

if (app.Environment.IsDevelopment())
{
	app.UseSwagger();
	app.UseSwaggerUI(options => { options.SwaggerEndpoint("/swagger/v1/swagger.json", "Publishing_Platform"); });
}

using (var scope = app.Services.CreateScope())
{
	var context = scope.ServiceProvider.GetRequiredService<PlatformContext>();
	//bool created = context.Database.EnsureCreated();

	SeedData.EnsurePopulated(context);
}

app.Run();